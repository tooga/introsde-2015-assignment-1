<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================= 
    Introduction to Service Design and Engineering: Assignment 1
    Description: ANT build script for Assignment 1
    Author: Toomas Kallioja
    
    Notes: 
    
    * This build file includes targets to download and install in your local project the Apache IVY jar
    * IVY is used to manage dependencies on projects (e.g., jaxb libraries, jackson libraries for json, etc.) 
    * 
       TO USE IVY IN YOUR PROJECTS IN ORDER TO GET MANAGE DEPENDENCIES, MAKE SURE THE FOLLOWING LINES ARE
       IN YOUR BUILD.XML UNTILL 'IVY-END-LINE'
       
       # The target "download-ivy" and "install-ivy" will download the ivy jar and place it in the "ivy" folder
       # 
-->
<project name="Assignment1" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Ivy properties, download, installation and configuration -->
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<!-- target will donwload ivy.jar if its inot in the "ivy" folder yet -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!--
			 try to load ivy here from local ivy dir, in case the user has not already dropped
			              it into ant's lib dir (note that the latter copy will always take precedence).
			              We will not fail as long as local lib dir exists (it may be empty) and
			              ivy is in at least one of ant's lib dir or the local lib dir. 
			-->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<!-- General properties definitions -->
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="xjc.package" value="transforms.generated" />

	<!-- target resolve downloads the dependencies to your lib folder  -->            
	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
	</target>


	<!-- paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks  -->
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>

	<!-- target for initialisation: makes build dir, depends on intall and resolve -->
	<target name="init" depends="install-ivy, resolve">
		<echo message="Init has been called" />
		<mkdir dir="${build.dir}" />
		<echo message="${build.dir} has been created" />
	</target>

	<!-- target for cleaning generated files -->
	<target name="clean">
		<echo message="Clean has been called" />
		<delete dir="${build.dir}" />
		<echo message="${build.dir} has been deleted" />
		<delete dir="${src.dir}/${xjc.package}" />
		<echo message="${src.dir}/${xjc.package} has been deleted" />
		<delete file="people1.xml" />
		<echo message="people1.xml has been deleted" />
		<delete file="people1.json" />
		<echo message="people1.json has been deleted" />
	</target>

	<!-- target for generating classes from people.xsd, depends on init -->
	<target name="generate" depends="init">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path.id">
		</taskdef>
		<xjc schema="people.xsd" destdir="${src.dir}" package="${xjc.package}" />
	</target>

	<!-- target for compiling, depends on generate -->
	<target name="compile" depends="generate">
		<echo message="Compile target has been called" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
		</javac>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
	</target>

	<!-- target for executing assignment evaluation, depends on compile -->
	<target name="execute.evaluation" depends="compile">
		<echo message="Executing assignment evaluation..."/>
		<antcall target="execute.HealthProfileReader"/>	
		<antcall target="execute.JAXBMarshaller"/>
		<antcall target="execute.JAXBUnMarshaller"/>
		<antcall target="execute.JAXBMarshalJSON"/>
		<echo message="Finished executing assignment evaluation!"/>
	</target>	

	<!-- target for executing healthprofilereader -->
	<target name="execute.HealthProfileReader">
		<echo message="Printing people..." />
		<java classname="HealthProfileReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>	

	<!-- target for executing JSON marshalling -->
	<target name="execute.JAXBMarshalJSON">
		<echo message="Executing JAXBMarshalJSON: will produce a people1.json in root folder" />
		<java classname="transforms.JAXBMarshalJSON" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- target for executing XML marshalling -->
	<target name="execute.JAXBMarshaller">
		<echo message="Executing JAXBMarshaller: will produce a people1.xml in root folder" />
		<java classname="transforms.JAXBMarshaller" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- target for executing XML unmarshalling -->
	<target name="execute.JAXBUnMarshaller">
		<echo message="Executing JAXBUnMarshaller" />
		<java classname="transforms.JAXBUnMarshaller" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

</project>